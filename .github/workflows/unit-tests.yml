name: Unit Tests
concurrency:
  group: unittests-${{ github.repository }}

on:
  push:
    branches:
      - master
  schedule:
    - cron: '1 22 * * 1-5'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch under test:'
        required: false
        default: develop
        type: string

env:
  AWS_CPP_SDK_VERSION: "1.9.365"
  CCACHE_NAME: "cpp-unittest-build"
  DEBIAN_FRONTEND: "noninteractive"
  KUBERNETES_VERSION: "1.24.3"
  HELM_VERSION: "3.8.1"
  MINIKUBE_VERSION: "1.26.1"
  OPENTELEMETRY_VERSION: "1.6.1"
  PYTHON_VERSION: "3.10"

jobs:
  workflow-inputs:
    name: Display Workflow Inputs
    runs-on: ubuntu-20.04
    if: github.event.inputs != ''

    steps:
      - name: Output inputs
        run: |-
          echo "## Workflow inputs" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ toJSON(github.event.inputs) }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  test:
    name: Test
    runs-on: ubuntu-22.04

    steps:
      - name: Install OS Packages
        run: |-
          sudo apt-get update -y
          sudo apt-get install -y \
            autoconf \
            build-essential \
            ccache \
            cmake \
            g++ \
            libbenchmark-dev \
            libboost-all-dev \
            libcrypto++-dev \
            libcurl4-openssl-dev \
            libgmock-dev \
            libgrpc-dev \
            libgrpc++-dev \
            libgtest-dev \
            libprotobuf-dev \
            libtool \
            libssl-dev \
            libyaml-cpp-dev \
            libz-dev \
            pkg-config \
            protobuf-compiler-grpc

      - name: Install AWS C++ SDK
        working-directory: .
        run: |-
          curl -fsSL https://raw.githubusercontent.com/slateci/docker-images/master/slate-client-server/scripts/install-aws-cpp-sdk.sh -o install-aws-cpp-sdk.sh
          chmod +x ./install-aws-cpp-sdk.sh
          sudo ./install-aws-cpp-sdk.sh ${{ env.AWS_CPP_SDK_VERSION }} ubuntu22_04

      - name: Install OpenTelemetry C++ Client
        working-directory: .
        run: |-
          curl -fsSL https://raw.githubusercontent.com/slateci/docker-images/master/slate-client-server/scripts/install-opentelemetry.sh -o install-opentelemetry.sh
          chmod +x ./install-opentelemetry.sh
          sudo ./install-opentelemetry.sh ${{ env.OPENTELEMETRY_VERSION }} ubuntu22_04

      - name: Check out repo
        if: ${{ github.event.inputs.branch == '' }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: ./checkout

      - name: Check out specific branch of repo
        if: ${{ github.event.inputs.branch != '' }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: ./checkout
          ref: ${{ github.event.inputs.branch }}

      - name: Set up ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ env.CCACHE_NAME }}-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CCACHE_NAME }}-${{ github.ref }}
            ${{ runner.os }}-${{ env.CCACHE_NAME }}-

      - name: Build SLATE binaries and tests
        working-directory: ./checkout/build
        env:
          VERSION_OVERRIDE: localdev
        run: |-
          cmake .. \
            -D CMAKE_C_COMPILER_LAUNCHER=ccache \
            -D CMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DBUILD_CLIENT=True \
            -DBUILD_SERVER=True \
            -DBUILD_SERVER_TESTS=True \
            -DSTATIC_CLIENT=False
          make -j2 -k

      - id: minikube
        name: Create Minikube Cluster
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: ${{ env.MINIKUBE_VERSION }}
          driver: docker
          container-runtime: containerd
          kubernetes-version: "v${{ env.KUBERNETES_VERSION }}"
          cni: calico

      - name: Download DynamoDB
        working-directory: .
        run: |-
          mkdir ./dynamodb
          echo "Downloading DynamoDB from Amazon......................."
          for FILENAME in dynamodb_local_latest.tar.gz dynamodb_local_latest.tar.gz.sha256
          do
            curl -fsSL https://s3.us-west-2.amazonaws.com/dynamodb-local/$FILENAME -o $FILENAME
          done

          echo "Verifying download......................."
          sha256sum -c dynamodb_local_latest.tar.gz.sha256 || exit 1

          echo "Extracting download archive......................."
          tar -zxf dynamodb_local_latest.tar.gz --directory ./dynamodb
          ls -al ./dynamodb

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Run tests
        timeout-minutes: 90
        working-directory: ./checkout/build
        env:
          DYNAMODB_JAR: "${{ github.workspace }}/dynamodb/DynamoDBLocal.jar"
          DYNAMODB_LIB: "${{ github.workspace }}/dynamodb/DynamoDBLocal_lib"
          SLATE_SCHEMA_DIR: "${{ github.workspace }}/checkout/resources/api_specification"
          TEST_SRC: "${{ github.workspace }}/checkout/test"
        run: make check

  notifications:
    name: Notifications
    runs-on: ubuntu-20.04
    needs:
      - test
    if: ${{ always() && (needs.build.result == 'failure' || needs.test.result == 'failure') }}

    steps:
      - name: Notify Slack of Failure
        uses: slateci/github-actions/.github/actions/slack-notify-failure@v12
        with:
          slack_bot_token: '${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}'
