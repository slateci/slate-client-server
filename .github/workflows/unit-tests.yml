name: Unit Tests
concurrency:
  group: unittests-${{ github.repository }}

on:
  push:
    branches:
#      - banana
      - feature/250_new-github-workflow-for-api-unit-tests

#  workflow_dispatch:
#    inputs:
#      branch:
#        description: 'Choose a branch to test:'
#        type: choice
#        default: master
#        options:
#          - develop
#          - master
#        required: true
#      kubernetes_version:
#        description: 'Choose the version of Kubernetes for the test cluster:'
#        type: string
#        default: 'v1.23.1'
#        required: true

env:
  AWS_CPP_SDK_VERSION: 1.7.345
  HELM_VERSION: 3.8.1
  MINIKUBE_VERSION: 1.24.0
  KUBERNETES_VERSION: v1.23.1
  PYTHON_VERSION: 3.10

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-20.04

    steps:
      - name: Install OS Packages
        run: |-
          sudo apt-get update -y
          sudo apt-get install -y \
            cmake \
            g++ \
            libboost-all-dev \
            libcurl4-openssl-dev \
            libssl-dev \
            libyaml-cpp-dev \
            libz-dev

      - name: Download pre-built AWS C++ SDK
        working-directory: .
        run: |-
          echo "Downloading pre-built AWS C++ SDK for Ubuntu 20.04..................."
          curl -fsSL https://slateci.io/slate-client-server/aws-cpp-sdk/ubuntu20_04-${{ env.AWS_CPP_SDK_VERSION }}.tar.gz -o ubuntu20_04-${{ env.AWS_CPP_SDK_VERSION }}.tar.gz
          tar -zxf ubuntu20_04-${{ env.AWS_CPP_SDK_VERSION }}.tar.gz --directory .
          ls -al ./aws/build

      - name: Install AWS C++ SDK
        working-directory: ./aws/build
        run: |-
          sudo make install

      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: ./checkout

      - name: Build SLATE binaries
        working-directory: ./checkout/build
        run: |-
          cmake .. -DBUILD_CLIENT=True -DBUILD_SERVER=True -DBUILD_SERVER_TESTS=True -DSTATIC_CLIENT=False
          export VERSION_OVERRIDE=localdev
          make

      - id: minikube
        name: Create Minikube Cluster
        uses: medyagh/setup-minikube@master
        with:
          minikube-version: ${{ env.MINIKUBE_VERSION }}
          driver: docker
          container-runtime: containerd
          kubernetes-version: ${{ env.KUBERNETES_VERSION }}
          cni: calico

      - name: Display Kubeconfig
        working-directory: .
        run: |-
          kubectl config view > kubeconfig
          cat kubeconfig

      - name: Download DynamoDB
        working-directory: .
        run: |-
          mkdir ./dynamodb
          echo "Downloading DynamoDB from Amazon......................."
          for FILENAME in dynamodb_local_latest.tar.gz dynamodb_local_latest.tar.gz.sha256
          do
            curl -fsSL https://s3.us-west-2.amazonaws.com/dynamodb-local/$FILENAME -o $FILENAME
          done

          echo "Verifying download......................."
          sha256sum -c dynamodb_local_latest.tar.gz.sha256 || exit 1

          echo "Extracting download archive......................."
          tar -zxf dynamodb_local_latest.tar.gz --directory ./dynamodb
          ls -al ./dynamodb

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

#      - name: Set up tests
#        timeout-minutes: 10
#        working-directory: ./checkout/test
#        run: |-
#          echo "${{ github.workspace }}/checkout/build" >> ${{ github.path }}
#          . init_test_env.sh

      - name: Run tests
        timeout-minutes: 60
        working-directory: ./checkout/build
        env:
          DYNAMODB_JAR: "${{ github.workspace }}/dynamodb/DynamoDBLocal.jar"
          DYNAMODB_LIB: "${{ github.workspace }}/dynamodb/DynamoDBLocal_lib"
          SLATE_SCHEMA_DIR: "${{ github.workspace }}/checkout/resources/api_specification"
          TEST_SRC: "${{ github.workspace }}/checkout/test"
        run: make check
